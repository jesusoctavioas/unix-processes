#! /usr/bin/env python3
"""Unix Processes

Usage:
  process look  <pid>
  process (-l | --list)
  process (-h | --help)
  process graph <pid>

Options:
  -h --help     Show this screen.
  -l --list     Lists the processes running
  look        lookup specific pid
  graph       Generate specific pid cpu usage bar graph of 10 intervals


"""
from docopt import docopt
import psutil,subprocess
from termcolor import colored, cprint


def process_id():
	for process in psutil.pids():
		p = psutil.Process(process)
		ids = colored(process,'green', attrs=['bold'])
		names = colored(p.name(),'cyan',attrs=['bold'])
		mem_usage = colored(round(p.memory_percent()*10,2), 'red',attrs=['bold']) 
		print('Process ID: ' + ids +' Name: ' + names+ ' mem_usage: '+mem_usage)



def process_lookup(x):
  for process in psutil.pids():
    proc = psutil.Process(x)
    var = ['pid','name','parent','exe','cwd','user','status',
    'cpu-times','mem %','cpu %']
    mem = round(proc.memory_percent()*10,2)
    if process == x:
      print(colored(var[0],'green', attrs=['bold'])+" "+str(proc.pid))
      print(colored(var[1],'green', attrs=['bold'])+" "+str(proc.name()))
      print(colored(var[2],'green', attrs=['bold'])+" "+str(proc.ppid()))
      print(colored(var[3],'green', attrs=['bold'])+" "+str(proc.exe()))
      print(colored(var[4],'green', attrs=['bold'])+" "+str(proc.cwd()))
      print(colored(var[5],'green', attrs=['bold'])+" "+str(proc.username()))
      print(colored(var[6],'green', attrs=['bold'])+" "+str(proc.status()))
      print(colored(var[7],'green', attrs=['bold'])+" "+str(proc.cpu_times()))
      print(colored(var[8],'green', attrs=['bold'])+" "+str(mem)+'%')
      print(colored(var[9],'green', attrs=['bold'])+" "+str(proc.cpu_percent(interval=1))+"%")



def cpu_usage_graph(process):
  p = psutil.Process(process)
  with open("cpu_usage.dat","w") as f:
    for nums in range(1,11):
      print(str(nums) + " " + str(p.cpu_percent(interval=nums)),file=f)

  print("CPU USAGE:" + p.name())
  subprocess.call(['termgraph', 'cpu_usage.dat'])

# Commandline logic 
if __name__ == '__main__':
    arguments = docopt(__doc__)

    # if an argument called hello was passed, execute the hello logic.
    if arguments['--list']:
      process_id()
    elif arguments['look']:
      process_lookup(int(arguments['<pid>']))
    elif arguments['graph']:
      cpu_usage_graph(int(arguments['<pid>']))
